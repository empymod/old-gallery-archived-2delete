.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_comparisons_2D_triaxial_MARE2DEM.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_comparisons_2D_triaxial_MARE2DEM.py:


2. MARE2DEM: 2D with tri-axial anisotropy
=========================================

``MARE2DEM`` is an open-source, finite element 2.5D code for controlled-source
electromagnetic (CSEM) and magnetotelluric (MT) data, see `mare2dem.ucsd.edu
<https://mare2dem.ucsd.edu>`_.


.. code-block:: default

    import emg3d
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm









Load MARE2DEM result
--------------------


.. code-block:: default


    # Location of data files.
    data_url = 'https://raw.githubusercontent.com/empymod/emg3d-gallery/'
    data_url += 'master/examples/data/MARE2DEM/'

    mar_tg = np.loadtxt(data_url+'triaxial.0.resp', skiprows=93, usecols=6)
    mar_tg = mar_tg[::2] + 1j*mar_tg[1::2]

    mar_bg = np.loadtxt(data_url+'triaxial-BG.0.resp', skiprows=93, usecols=6)
    mar_bg = mar_bg[::2] + 1j*mar_bg[1::2]









emg3d
-----


.. code-block:: default


    src = (50, 0, -1950, 0, 0)  # Source location [x, y, z, azimuth, dip]
    rec = (np.arange(80)*100+2050, 0, -1999.9)
    freq = 0.5                  # Frequency (Hz)










.. code-block:: default


    gridinput = {
        'min_width': 50,
        'verb': 0,
        'freq': freq,
        'max_domain': 50000,
    }

    # Get cell widths and origin in each direction
    xx, x0 = emg3d.meshes.get_hx_h0(
        res=[0.3, 1e5], fixed=src[0], domain=[-100, 10100],
        **gridinput)
    yy, y0 = emg3d.meshes.get_hx_h0(
        res=[0.3, 1e5], fixed=src[1], domain=[400, 400], **gridinput)
    zz, z0 = emg3d.meshes.get_hx_h0(
        res=[0.3, 1., 1e5], domain=[-4200, 0], **gridinput,
        fixed=[-2000, 0, -4200])

    # Initiate mesh.
    grid = emg3d.TensorMesh([xx, yy, zz], x0=np.array([x0, y0, z0]))
    grid






.. only:: builder_html

    .. raw:: html

        <table>
          <tr>
            <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
            <td style='font-size: 1.2em; text-align: center;'colspan='4'>1,310,720 cells</td>
          </tr>
          <tr>
            <th></th>
            <th></th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
            <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
          </tr>
          <tr>
            <th style='padding: 5px 20px 5px 20px;'>dir</th>
            <th style='padding: 5px 20px 5px 20px;'>nC</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>x</td>
            <td style='padding: 5px 20px 5px 20px;'>256</td>
            <td style='padding: 5px 20px 5px 20px;'>-58,000.08</td>
            <td style='padding: 5px 20px 5px 20px;'>68,000.08</td>
            <td style='padding: 5px 20px 5px 20px;'>50.00</td>
            <td style='padding: 5px 20px 5px 20px;'>10,876.84</td>
            <td style='padding: 5px 20px 5px 20px;'>1.23</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>y</td>
            <td style='padding: 5px 20px 5px 20px;'>40</td>
            <td style='padding: 5px 20px 5px 20px;'>-50,470.20</td>
            <td style='padding: 5px 20px 5px 20px;'>74,591.20</td>
            <td style='padding: 5px 20px 5px 20px;'>50.00</td>
            <td style='padding: 5px 20px 5px 20px;'>23,770.99</td>
            <td style='padding: 5px 20px 5px 20px;'>1.47</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>z</td>
            <td style='padding: 5px 20px 5px 20px;'>128</td>
            <td style='padding: 5px 20px 5px 20px;'>-8,142.51</td>
            <td style='padding: 5px 20px 5px 20px;'>48,285.61</td>
            <td style='padding: 5px 20px 5px 20px;'>50.00</td>
            <td style='padding: 5px 20px 5px 20px;'>7,759.47</td>
            <td style='padding: 5px 20px 5px 20px;'>1.19</td>
          </tr>
        </table>

        <br />
        <br />


.. code-block:: default


    xx = (grid.gridCC[:, 0] > 0)*(grid.gridCC[:, 0] <= 6000)
    zz = (grid.gridCC[:, 2] > -4200)*(grid.gridCC[:, 2] < -4000)










.. code-block:: default


    # Background
    res_x_full = 2*np.ones(grid.nC)
    res_y_full = 1*np.ones(grid.nC)
    res_z_full = 3*np.ones(grid.nC)

    # Water - isotropic
    res_x_full[grid.gridCC[:, 2] >= -2000] = 0.3
    res_y_full[grid.gridCC[:, 2] >= -2000] = 0.3
    res_z_full[grid.gridCC[:, 2] >= -2000] = 0.3

    # Air - isotropic
    res_x_full[grid.gridCC[:, 2] >= 0] = 1e10
    res_y_full[grid.gridCC[:, 2] >= 0] = 1e10
    res_z_full[grid.gridCC[:, 2] >= 0] = 1e10

    # Target
    res_x_full_tg = res_x_full.copy()
    res_y_full_tg = res_y_full.copy()
    res_z_full_tg = res_z_full.copy()
    res_x_full_tg[xx*zz] = 200
    res_y_full_tg[xx*zz] = 100
    res_z_full_tg[xx*zz] = 300

    # Collect models
    model_bg = emg3d.Model(
            grid, property_x=res_x_full, property_y=res_y_full,
            property_z=res_z_full, mapping='Resistivity')
    model_tg = emg3d.Model(
            grid, property_x=res_x_full_tg, property_y=res_y_full_tg,
            property_z=res_z_full_tg, mapping='Resistivity')

    # Create source field
    sfield = emg3d.get_source_field(grid, src, freq, 0)

    # Solver parameters
    sparams = {
        'verb': 3,
        'sslsolver': True,
        'semicoarsening': True,
        'linerelaxation': True
    }

    # QC model
    grid.plot_3d_slicer(
            model_tg.property_x, clim=[0.3, 300], zlim=[-6000, 500],
            pcolor_opts={'norm': LogNorm()})





.. image:: /gallery/comparisons/images/sphx_glr_2D_triaxial_MARE2DEM_001.png
    :alt: 2D triaxial MARE2DEM
    :class: sphx-glr-single-img





Model background
````````````````


.. code-block:: default


    efield_bg = emg3d.solve(grid, model_bg, sfield, **sparams)
    em3_bg = emg3d.get_receiver(grid, efield_bg.fx, rec)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    :: emg3d START :: 21:40:58 :: v0.12.0

       MG-cycle       : 'F'                 sslsolver : 'bicgstab'
       semicoarsening : True [1 2 3]        tol       : 1e-06
       linerelaxation : True [4 5 6]        maxit     : 50 (3)
       nu_{i,1,c,2}   : 0, 2, 1, 2          verb      : 3
       Original grid  : 256 x  40 x 128     => 1,310,720 cells
       Coarsest grid  :   2 x   5 x   2     => 20 cells
       Coarsest level :   7 ;   3 ;   6   

       [hh:mm:ss]  rel. error            solver              MG          l s

           h_
          2h_ \                                        /
          4h_  \                            /\        / 
          8h_   \                  /\      /  \      /  
         16h_    \          /\    /  \    /    \    /   
         32h_     \    /\  /  \  /    \  /      \  /    
         64h_      \/\/  \/    \/      \/        \/     

       [21:41:20]   6.806e-03  after                       1 F-cycles    4 1
       [21:41:40]   3.423e-04  after                       2 F-cycles    5 2
       [21:41:58]   2.211e-04  after                       3 F-cycles    6 3
       [21:42:19]   5.626e-05  after                       4 F-cycles    4 1
       [21:42:40]   3.526e-06  after                       5 F-cycles    5 2
       [21:42:58]   2.308e-06  after                       6 F-cycles    6 3
       [21:42:59]   1.739e-06  after   1 bicgstab-cycles
       [21:43:19]   4.598e-07  after                       7 F-cycles    4 1
       [21:43:20]   4.766e-07  after   2 bicgstab-cycles

       > CONVERGED
       > Solver steps     : 2
       > MG prec. steps   : 7
       > Final rel. error : 4.766e-07

    :: emg3d END   :: 21:43:20 :: runtime = 0:02:22





Model target
````````````


.. code-block:: default


    efield_tg = emg3d.solve(grid, model_tg, sfield, **sparams)
    em3_tg = emg3d.get_receiver(grid, efield_tg.fx, rec)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    :: emg3d START :: 21:43:20 :: v0.12.0

       MG-cycle       : 'F'                 sslsolver : 'bicgstab'
       semicoarsening : True [1 2 3]        tol       : 1e-06
       linerelaxation : True [4 5 6]        maxit     : 50 (3)
       nu_{i,1,c,2}   : 0, 2, 1, 2          verb      : 3
       Original grid  : 256 x  40 x 128     => 1,310,720 cells
       Coarsest grid  :   2 x   5 x   2     => 20 cells
       Coarsest level :   7 ;   3 ;   6   

       [hh:mm:ss]  rel. error            solver              MG          l s

           h_
          2h_ \                                        /
          4h_  \                            /\        / 
          8h_   \                  /\      /  \      /  
         16h_    \          /\    /  \    /    \    /   
         32h_     \    /\  /  \  /    \  /      \  /    
         64h_      \/\/  \/    \/      \/        \/     

       [21:43:43]   6.806e-03  after                       1 F-cycles    4 1
       [21:44:06]   3.483e-04  after                       2 F-cycles    5 2
       [21:44:28]   2.727e-04  after                       3 F-cycles    6 3
       [21:44:50]   7.758e-05  after                       4 F-cycles    4 1
       [21:45:11]   1.342e-05  after                       5 F-cycles    5 2
       [21:45:30]   3.357e-05  after                       6 F-cycles    6 3
       [21:45:30]   2.761e-05  after   1 bicgstab-cycles
       [21:45:52]   1.001e-05  after                       7 F-cycles    4 1
       [21:46:12]   2.011e-06  after                       8 F-cycles    5 2
       [21:46:31]   4.168e-06  after                       9 F-cycles    6 3
       [21:46:55]   1.469e-06  after                      10 F-cycles    4 1
       [21:47:17]   3.138e-07  after                      11 F-cycles    5 2
       [21:47:17]   2.698e-07  after   2 bicgstab-cycles

       > CONVERGED
       > Solver steps     : 2
       > MG prec. steps   : 11
       > Final rel. error : 2.698e-07

    :: emg3d END   :: 21:47:17 :: runtime = 0:03:57





Plot
----


.. code-block:: default


    plt.figure(figsize=(9, 4))

    # REAL PART
    ax1 = plt.subplot2grid((4, 2), (0, 0), rowspan=3)
    plt.title(r'|Real|')

    plt.plot(rec[0]/1e3, 1e12*np.abs(mar_tg.real), '-', label='MARE2DEM target')
    plt.plot(rec[0]/1e3, 1e12*np.abs(mar_bg.real), '-', label='MARE2DEM BG')

    plt.plot(rec[0]/1e3, 1e12*np.abs(em3_tg.real), 'k--')
    plt.plot(rec[0]/1e3, 1e12*np.abs(em3_bg.real), 'k-.')

    plt.ylabel('$E_x$ (pV/m)')
    ax1.set_xticklabels([])
    plt.yscale('log')
    plt.legend(loc=4, ncol=2)
    plt.grid(axis='y', c='0.9')


    # NORMALIZED DIFFERENCE REAL
    ax2 = plt.subplot2grid((4, 2), (3, 0))

    nd_bg_re = np.clip(200*abs(mar_bg.real-em3_bg.real) /
                       (abs(mar_bg.real) + abs(em3_bg.real)), 0.1, 10)
    nd_tg_re = np.clip(200*abs(mar_tg.real-em3_tg.real) /
                       (abs(mar_tg.real) + abs(em3_tg.real)), 0.1, 10)

    plt.semilogy(rec[0]/1e3, nd_tg_re, '.', label='target')
    plt.semilogy(rec[0]/1e3, nd_bg_re, '.', label='background')

    plt.ylabel('Norm. Diff (%)')
    plt.xlabel('Offset (km)')
    plt.yscale('log')
    plt.xlim(ax1.get_xlim())
    plt.ylim([8e-2, 12])
    plt.yticks([0.1, 1, 10], ('0.1', '1', '10'))
    plt.grid(axis='y', c='0.9')


    # IMAGINARY PART
    ax3 = plt.subplot2grid((4, 2), (0, 1), rowspan=3, sharey=ax1)
    plt.title(r'|Imaginary|')

    plt.plot(rec[0]/1e3, 1e12*np.abs(mar_tg.imag), '-')
    plt.plot(rec[0]/1e3, 1e12*np.abs(mar_bg.imag), '-')

    plt.plot(rec[0]/1e3, 1e12*np.abs(em3_tg.imag), 'k--', label='emg3d target')
    plt.plot(rec[0]/1e3, 1e12*np.abs(em3_bg.imag), 'k-.', label='emg3d BG')

    plt.ylabel('$E_x$ (pV/m)')
    ax3.set_xticklabels([])
    plt.legend(loc=3, ncol=2)
    ax3.yaxis.tick_right()
    ax3.yaxis.set_label_position("right")
    plt.grid(axis='y', c='0.9')


    # NORMALIZED DIFFERENCE IMAG
    ax4 = plt.subplot2grid((4, 2), (3, 1))

    nd_bg_im = np.clip(200*abs(mar_bg.imag-em3_bg.imag) /
                       (abs(mar_bg.imag) + abs(em3_bg.imag)), 0.1, 10)
    nd_tg_im = np.clip(200*abs(mar_tg.imag-em3_tg.imag) /
                       (abs(mar_tg.imag) + abs(em3_tg.imag)), 0.1, 10)

    plt.semilogy(rec[0]/1e3, nd_tg_im, 'C0.', label='Target')
    plt.semilogy(rec[0]/1e3, nd_bg_im, 'C1.', label='BGC')

    plt.xlabel('Offset (km)')
    plt.yscale('log')
    plt.xlim(ax1.get_xlim())
    plt.ylabel('Norm. diff. %')
    plt.ylim([8e-2, 12])
    plt.yticks([0.1, 1, 10], ('0.1', '1', '10'))
    ax4.yaxis.tick_right()
    ax4.yaxis.set_label_position("right")
    plt.grid(axis='y', c='0.9')


    # SWITCH OFF SPINES
    ax1.spines['top'].set_visible(False)
    ax1.spines['right'].set_visible(False)
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    ax3.spines['top'].set_visible(False)
    ax3.spines['left'].set_visible(False)
    ax4.spines['top'].set_visible(False)
    ax4.spines['left'].set_visible(False)

    plt.tight_layout()
    plt.show()





.. image:: /gallery/comparisons/images/sphx_glr_2D_triaxial_MARE2DEM_002.png
    :alt: |Real|, |Imaginary|
    :class: sphx-glr-single-img






.. code-block:: default


    emg3d.Report()





.. only:: builder_html

    .. raw:: html

        <table style='border: 3px solid #ddd;'>
          <tr>
             <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Fri Jul 31 21:47:19 2020 CEST</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
            <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
            <td style='text-align: left; border: 2px solid #fff;'>4</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
            <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
            <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
            <td style='text-align: left; border: 2px solid #fff;'>15.5 GB</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
            <td style='text-align: left; border: 2px solid #fff;'>Python</td>
          </tr>
          <tr>
             <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.8.3 (default, Jul  2 2020, 16:21:59) 
        [GCC 7.3.0]</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.18.5</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.5.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.50.1</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.12.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.0.2</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.16.0</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.4.15</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.10.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
            <td style='text-align: left; border: 2px solid #fff;'>3.2.2</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>IPython</td>
            <td style='text-align: left; border: 2px solid #fff;'>7.16.1</td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
          </tr>
          <tr>
             <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) Math Kernel Library Version 2020.0.1 Product Build 20200208 for Intel(R) 64 architecture applications</td>
          </tr>
        </table>
        <br />
        <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  23.172 seconds)

**Estimated memory usage:**  1180 MB


.. _sphx_glr_download_gallery_comparisons_2D_triaxial_MARE2DEM.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 2D_triaxial_MARE2DEM.py <2D_triaxial_MARE2DEM.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 2D_triaxial_MARE2DEM.ipynb <2D_triaxial_MARE2DEM.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
