.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_interactions_GemPy-II.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_interactions_GemPy-II.py:


2. GemPy-II: *Perth Basin*
==========================

This example is mainly about building a deep marine resistivity model that can
be used in other examples. There is not a lot of explanation. For more details
regarding the integration of `GemPy` and `emg3d` see the
:ref:`sphx_glr_gallery_interactions_gempy-i.py`, and make sure to consult the
many useful information over at `GemPy <https://www.gempy.org>`_.

The model is based on the `Perth Basin Model
<https://docs.gempy.org/examples/real/Perth_basin.html>`_ from GemPy. We take
the model, assign resistivities to the lithologies, create a random topography,
move it 2 km down, fill it up with sea water, and add an air layer. The result
is what is referred to in other examples as model `GemPy-II`, a synthetic,
deep-marine resistivity model.

**Note:** The original model (*Perth_Basin*) hosted on
https://github.com/cgre-aachen/gempy_data is released under the `LGPL-3.0
License <https://www.gnu.org/licenses/lgpl-3.0.en.html>`_.


.. code-block:: default

    import emg3d
    import pyvista
    import numpy as np
    import gempy as gempy
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    plt.style.use('ggplot')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/gempy/__init__.py:16: UserWarning: Unable to enable faulthandler:
    '_LoggingTee' object has no attribute 'fileno'
      warnings.warn('Unable to enable faulthandler:\n%s' % str(e))




Get and initiate the *Perth Basin*
----------------------------------


.. code-block:: default


    # Initiate a model
    geo_model = gempy.create_model('GemPy-II')

    url_path = 'https://raw.githubusercontent.com/cgre-aachen/gempy_data/'
    url_path += 'master/data/input_data/Perth_basin/'

    # Define the grid
    nx, ny, nz = 50, 50, 100
    extent = [337000, 400000, 6640000, 6710000, -12000, 1000]

    # Importing the data from CSV-files and setting extent and resolution
    gempy.init_data(
        geo_model,
        extent=extent,
        resolution=[nx, ny, nz],
        path_i=url_path+"Paper_GU2F_sc_faults_topo_Points.csv",
        path_o=url_path+"Paper_GU2F_sc_faults_topo_Foliations.csv",
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular']

    GemPy-II  2020-07-31 22:51



Initiate the stratigraphies and faults
------------------------------------------------------------




.. code-block:: default


    # We just follow the example here
    del_surfaces = ['Cadda', 'Woodada_Kockatea', 'Cattamarra']
    geo_model.delete_surfaces(del_surfaces)

    # Map the different series
    gempy.map_series_to_surfaces(
        geo_model,
        {
            "fault_Abrolhos_Transfer": ["Abrolhos_Transfer"],
            "fault_Coomallo": ["Coomallo"],
            "fault_Eneabba_South": ["Eneabba_South"],
            "fault_Hypo_fault_W": ["Hypo_fault_W"],
            "fault_Hypo_fault_E": ["Hypo_fault_E"],
            "fault_Urella_North": ["Urella_North"],
            "fault_Urella_South": ["Urella_South"],
            "fault_Darling": ["Darling"],
            "Sedimentary_Series": ['Cretaceous', 'Yarragadee', 'Eneabba',
                                   'Lesueur', 'Permian']
        }
    )

    order_series = ["fault_Abrolhos_Transfer",
                    "fault_Coomallo",
                    "fault_Eneabba_South",
                    "fault_Hypo_fault_W",
                    "fault_Hypo_fault_E",
                    "fault_Urella_North",
                    "fault_Darling",
                    "fault_Urella_South",
                    "Sedimentary_Series",
                    "Basement"]

    _ = geo_model.reorder_series(order_series)

    # Drop input data from the deleted series:
    geo_model.surface_points.df.dropna(inplace=True)
    geo_model.orientations.df.dropna(inplace=True)

    # Set faults
    geo_model.set_is_fault(["fault_Abrolhos_Transfer",
                            "fault_Coomallo",
                            "fault_Eneabba_South",
                            "fault_Hypo_fault_W",
                            "fault_Hypo_fault_E",
                            "fault_Urella_North",
                            "fault_Darling",
                            "fault_Urella_South"])
    fr = geo_model.faults.faults_relations_df.values
    fr[:, :-2] = False
    _ = geo_model.set_fault_relation(fr)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fault colors changed. If you do not like this behavior, set change_color to False.




Compute the model with GemPy
----------------------------


.. code-block:: default


    # Set the interpolator.
    gempy.set_interpolator(
        geo_model,
        compile_theano=True,
        theano_optimizer='fast_run',
        gradient=False,
        dtype='float32',
        verbose=[]
    )

    # Compute it.
    sol = gempy.compute_model(geo_model, compute_mesh=True)

    # Get the solution at the internal grid points.
    sol = gempy.compute_model(geo_model)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting kriging parameters to their default values.
    Compiling theano function...
    Level of Optimization:  fast_run
    Device:  cpu
    Precision:  float32
    Number of faults:  8
    Compilation Done!
    Kriging values: 
                                              values
    range                                   95068.4
    $C_o$                                2.1519e+08
    drift equations  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=3.22411e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=1.893e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.00132e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.53459e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.57114e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.55128e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.23105e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=2.58519e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=1.16963e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)
    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/theano/tensor/slinalg.py:255: LinAlgWarning: Ill-conditioned matrix (rcond=1.16966e-10): result may not be accurate.
      rval = scipy.linalg.solve(A, b)




Assign resistivities to the id's
--------------------------------

We define here a discretize mesh identical to the mesh used by GemPy, and
subsequently assign resistivities to the different lithologies.

Please note that these resistivities are made up, and do not necessarily
relate to the actual lithologies.


.. code-block:: default


    # We create a mesh 20 km x 20 km x 5 km, starting at the origin.
    # As long as we have the same number of cells we can trick the original grid
    # into any grid we want.
    hx = np.ones(nx)*20000/nx
    hy = np.ones(ny)*20000/ny
    hz = np.ones(nz)*5000/nz
    grid = emg3d.TensorMesh([hx, hy, hz], x0=[0, 0, -5000])

    # Make up some resistivities that might be interesting to model.
    ids = np.round(sol.lith_block)
    res = np.ones(grid.nC)
    res[ids == 9] = 2.0    # Cretaceous
    res[ids == 10] = 1.0   # Yarragadee
    res[ids == 11] = 4.0   # Eneabba
    res[ids == 12] = 50.0  # Lesueur
    res[ids == 13] = 7.0   # Permian
    res[ids == 14] = 10.0  # Basement









Topography
----------

Calls to ``geo_model.set_topography(source='random')`` create a random
topography every time. In order to have it reproducible we saved it once and
load it now.

Originally it was created and stored like this:

.. code::

    out = geo_model.set_topography(source='random')
    np.savetxt('../data/GemPy/GemPy-II-topo.txt', out.ravel('F'))


.. code-block:: default


    # Load the stored topography.
    topo_path = 'https://raw.githubusercontent.com/empymod/emg3d-gallery/'
    topo_path += 'master/examples/data/GemPy/GemPy-II-topo.txt'
    topo = np.loadtxt(topo_path).reshape((nx, ny, -1), order='F')
    np.save('GemPy-II-topo', topo)
    out = geo_model.set_topography(source='saved', filepath='GemPy-II-topo.npy')
    topo = out.topography.values_2d

    # Apply the topography to our resistivity cube.
    res = res.reshape(grid.vnC, order='C')

    # Get the scaling factor between the original extent and our made-up extent.
    fact = 5000/np.diff(extent[4:])

    # Loop over all x-y-values and convert cells above topography to water.
    for ix in range(nx):
        for iy in range(ny):
            res[ix, iy, grid.vectorCCz > topo[ix, iy, 2]*fact] = 0.3






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular' 'topography']




Extend the model by sea water and air
-------------------------------------


.. code-block:: default


    # Create an emg3d-model.
    model = emg3d.Model(grid, property_x=res.ravel('F'), mapping='Resistivity')

    # Add 2 km water and 500 m air.
    fhz = np.r_[np.ones(nz)*5000/nz, 2000, 500]
    z0 = -7000

    # Make the full mesh
    fullgrid = emg3d.TensorMesh([hx, hy, fhz], x0=[0, 0, z0])

    # Extend the model.
    fullmodel = emg3d.Model(fullgrid, np.ones(fullgrid.vnC), mapping='Resistivity')
    fullmodel.property_x[:, :, :-2] = model.property_x
    fullmodel.property_x[:, :, -2] = 0.3
    fullmodel.property_x[:, :, -1] = 1e8

    fullgrid






.. only:: builder_html

    .. raw:: html

        <table>
          <tr>
            <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
            <td style='font-size: 1.2em; text-align: center;'colspan='4'>255,000 cells</td>
          </tr>
          <tr>
            <th></th>
            <th></th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
            <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
          </tr>
          <tr>
            <th style='padding: 5px 20px 5px 20px;'>dir</th>
            <th style='padding: 5px 20px 5px 20px;'>nC</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>x</td>
            <td style='padding: 5px 20px 5px 20px;'>50</td>
            <td style='padding: 5px 20px 5px 20px;'>0.00</td>
            <td style='padding: 5px 20px 5px 20px;'>20,000.00</td>
            <td style='padding: 5px 20px 5px 20px;'>400.00</td>
            <td style='padding: 5px 20px 5px 20px;'>400.00</td>
            <td style='padding: 5px 20px 5px 20px;'>1.00</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>y</td>
            <td style='padding: 5px 20px 5px 20px;'>50</td>
            <td style='padding: 5px 20px 5px 20px;'>0.00</td>
            <td style='padding: 5px 20px 5px 20px;'>20,000.00</td>
            <td style='padding: 5px 20px 5px 20px;'>400.00</td>
            <td style='padding: 5px 20px 5px 20px;'>400.00</td>
            <td style='padding: 5px 20px 5px 20px;'>1.00</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>z</td>
            <td style='padding: 5px 20px 5px 20px;'>102</td>
            <td style='padding: 5px 20px 5px 20px;'>-7,000.00</td>
            <td style='padding: 5px 20px 5px 20px;'>500.00</td>
            <td style='padding: 5px 20px 5px 20px;'>50.00</td>
            <td style='padding: 5px 20px 5px 20px;'>2,000.00</td>
            <td style='padding: 5px 20px 5px 20px;'>40.00</td>
          </tr>
        </table>

        <br />
        <br />

Plot the model
------------------------------


.. code-block:: default


    # With discretize
    fullgrid.plot_3d_slicer(
        fullmodel.property_x, zslice=-3000, clim=[0.3, 100],
        pcolor_opts={'cmap': 'viridis', 'norm': LogNorm()}
    )


    # With PyVista
    dataset = fullgrid.toVTK({'res': np.log10(fullmodel.property_x.ravel('F'))})

    # Create the rendering scene and add a grid axes
    p = pyvista.Plotter(notebook=True)
    p.show_grid(location='outer')

    # Add spatially referenced data to the scene
    dparams = {'rng': np.log10([0.3, 500]), 'cmap': 'viridis', 'show_edges': False}
    xyz = (17500, 17500, -1500)
    p.add_mesh(dataset.slice('x', xyz), name='x-slice', **dparams)
    p.add_mesh(dataset.slice('y', xyz), name='y-slice', **dparams)

    # Add a layer as 3D
    p.add_mesh(dataset.threshold(
        [np.log10(49.9), np.log10(50.1)]), name='vol', **dparams)

    # Show the scene!
    p.camera_position = [(-10000, -41000, 8500), (10000, 10000, -3250), (0, 0, 1)]
    p.show()





.. image:: /gallery/interactions/images/sphx_glr_GemPy-II_001.png
    :alt: GemPy II
    :class: sphx-glr-single-img

.. image:: /gallery/interactions/images/sphx_glr_GemPy-II_002.png
    :alt: GemPy II
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=1024x768 at 0x7F9C47448610>




Store the grid and the model for use in other examples.
emg3d.save('../data/models/GemPy-II.h5', model=fullmodel, mesh=fullgrid)


.. code-block:: default


    emg3d.Report([gempy, pyvista, 'pandas'])





.. only:: builder_html

    .. raw:: html

        <table style='border: 3px solid #ddd;'>
          <tr>
             <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Fri Jul 31 22:52:02 2020 CEST</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
            <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
            <td style='text-align: left; border: 2px solid #fff;'>4</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
            <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
            <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
            <td style='text-align: left; border: 2px solid #fff;'>15.5 GB</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
            <td style='text-align: left; border: 2px solid #fff;'>Python</td>
          </tr>
          <tr>
             <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.8.3 (default, Jul  2 2020, 16:21:59) 
        [GCC 7.3.0]</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>gempy</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.2.3</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>pyvista</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.25.3</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>pandas</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.25.3</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.18.5</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.5.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.50.1</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.12.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.0.2</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.16.0</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.4.15</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.10.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
            <td style='text-align: left; border: 2px solid #fff;'>3.2.2</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>IPython</td>
            <td style='text-align: left; border: 2px solid #fff;'>7.16.1</td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
          </tr>
          <tr>
             <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) Math Kernel Library Version 2020.0.1 Product Build 20200208 for Intel(R) 64 architecture applications</td>
          </tr>
        </table>
        <br />
        <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  42.973 seconds)

**Estimated memory usage:**  1787 MB


.. _sphx_glr_download_gallery_interactions_GemPy-II.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: GemPy-II.py <GemPy-II.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: GemPy-II.ipynb <GemPy-II.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
