.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_interactions_GemPy_discretize_emg3d.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_interactions_GemPy_discretize_emg3d.py:


1. GemPy
========

Use GemPy to create a geological model as input to emg3d.

A simple example how you can use `GemPy <https://www.gempy.org>`_ to create a
geological model, move it onto `discretize <http://discretize.simpeg.xyz>`_,
and compute CSEM data with `emg3d <https://empymod.github.io>`_. Having it in
discretize allows us to plot it with `PyVista <https://github.com/pyvista>`_.


.. code-block:: default

    import emg3d
    import pyvista
    import numpy as np
    import gempy as gempy
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    plt.style.use('ggplot')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/gempy/__init__.py:16: UserWarning: Unable to enable faulthandler:
    '_LoggingTee' object has no attribute 'fileno'
      warnings.warn('Unable to enable faulthandler:\n%s' % str(e))




Creating a geological model
---------------------------

We start by using the model given in `Chapter 1.1
<https://docs.gempy.org/tutorials/ch1_fundamentals/ch1_1_basics.html>`_ of
the GemPy documentation. It is a nice, made-up model of a folded structure
with a fault.

**Changes made:** We load the csv-files from the above example in Chapter
1.1. I changed the stratigraphic unit names, and moved the model 2 km down.

Instead of reading a csv-file we could initiate an empty instance and then
add points and orientations after that by, e.g., providing numpy arrays.


.. code-block:: default


    # Initiate a model
    geo_model = gempy.create_model('gempy-discretize-emg3d')

    # Location of data files.
    data_url = 'https://raw.githubusercontent.com/empymod/emg3d-gallery/'
    data_url += 'master/examples/interactions/data/'

    # Importing the data from CSV-files and setting extent and resolution
    # This is a regular grid, mainly for plotting purposes
    gempy.init_data(
        geo_model,
        [0, 2000., 0, 2000., -2000, 40.], [50, 50, 51],
        path_o=data_url+"simple_fault_model_orientations.csv",
        path_i=data_url+"simple_fault_model_points.csv",
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular']

    gempy-discretize-emg3d  2020-07-31 08:38



Initiate the stratigraphies and faults, and add resistivities to lithology
--------------------------------------------------------------------------


.. code-block:: default


    # Add an air-layer: Horizontal layer at z=0m
    geo_model.add_surfaces('air')
    geo_model.add_surface_points(0, 0, 0, 'air')
    geo_model.add_surface_points(0, 0, 0, 'air')
    geo_model.add_orientations(0, 0, 0, 'air', [0, 0, 1])

    # Add a Series for the air layer; this series will not be cut by the fault
    geo_model.add_series('Air_Series')
    geo_model.modify_order_series(2, 'Air_Series')
    gempy.map_series_to_surfaces(geo_model, {'Air_Series': 'air'})

    # Map the different series
    gempy.map_series_to_surfaces(
        geo_model,
        {
            "Fault_Series": 'fault',
            "Air_Series": ('air'),
            "Strat_Series": ('seawater', 'overburden', 'target',
                             'underburden', 'basement')
        },
        remove_unused_series=True
    )

    geo_model.rename_series({'Main_Fault': 'Fault_Series'})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/dtr/anaconda3/envs/emg3d-gallery/lib/python3.8/site-packages/gempy/core/data_modules/geometric_data.py:289: UserWarning: Surface Points for the basement will not be used. Maybe you are missing an extralayer at the bottom of the pile.
      warnings.warn('Surface Points for the basement will not be used. Maybe you are missing an extra'





.. code-block:: default



    # Set which series the fault series is cutting
    geo_model.set_is_fault('Fault_Series')
    geo_model.faults.faults_relations_df






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fault colors changed. If you do not like this behavior, set change_color to False.


.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>Air_Series</th>
              <th>Fault_Series</th>
              <th>Strat_Series</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>Air_Series</th>
              <td>False</td>
              <td>False</td>
              <td>False</td>
            </tr>
            <tr>
              <th>Fault_Series</th>
              <td>False</td>
              <td>False</td>
              <td>True</td>
            </tr>
            <tr>
              <th>Strat_Series</th>
              <td>False</td>
              <td>False</td>
              <td>False</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

Model generation
----------------


.. code-block:: default


    gempy.set_interpolator(
        geo_model,
        compile_theano=True,
        theano_optimizer='fast_compile',
        verbose=[]
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting kriging parameters to their default values.
    Compiling theano function...
    Level of Optimization:  fast_compile
    Device:  cpu
    Precision:  float64
    Number of faults:  1
    Compilation Done!
    Kriging values: 
                         values
    range              3487.35
    $C_o$               289562
    drift equations  [3, 3, 3]

    <gempy.core.interpolator.InterpolatorModel object at 0x7f4a49137f70>




.. code-block:: default


    sol = gempy.compute_model(geo_model, compute_mesh=True)










.. code-block:: default


    # Plot lithologies (colour-code corresponds to lithologies)
    _ = gempy.plot_2d(geo_model, cell_number=25, direction='y', show_data=True)





.. image:: /gallery/interactions/images/sphx_glr_GemPy_discretize_emg3d_001.png
    :alt: Cell Number: 25 Direction: y
    :class: sphx-glr-single-img





Let's start with a discretize mesh for a CSEM survey.

Source location and frequency


.. code-block:: default


    src = [1000, 1000, -500, 0, 0]  # x-directed e-source at (1000, 1000, -500)
    freq = 1.0                      # Frequency










.. code-block:: default


    # Get computation domain as a function of frequency (resp., skin depth)
    hx_min, xdomain = emg3d.meshes.get_domain(
            x0=src[0], freq=freq, limits=[0, 2000], min_width=[5, 100])
    hz_min, zdomain = emg3d.meshes.get_domain(
            freq=freq, limits=[-2000, 0], min_width=[5, 20], fact_pos=40)

    # Create stretched grid
    nx = 2**6
    hx = emg3d.meshes.get_stretched_h(hx_min, xdomain, nx, src[0])
    hy = emg3d.meshes.get_stretched_h(hx_min, xdomain, nx, src[1])
    hz = emg3d.meshes.get_stretched_h(hz_min, zdomain, nx*2, x0=src[2], x1=0)
    grid = emg3d.TensorMesh(
            [hx, hy, hz], x0=(xdomain[0], xdomain[0], zdomain[0]))
    grid






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Warning :: Minimum cell width (43.07 m) is below `min_width`, because `nx` is too big for `domain`.
    Warning :: Minimum cell width (43.07 m) is below `min_width`, because `nx` is too big for `domain`.


.. only:: builder_html

    .. raw:: html

        <table>
          <tr>
            <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
            <td style='font-size: 1.2em; text-align: center;'colspan='4'>524,288 cells</td>
          </tr>
          <tr>
            <th></th>
            <th></th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
            <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
            <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
          </tr>
          <tr>
            <th style='padding: 5px 20px 5px 20px;'>dir</th>
            <th style='padding: 5px 20px 5px 20px;'>nC</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>min</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
            <th style='padding: 5px 20px 5px 20px;'>max</th>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>x</td>
            <td style='padding: 5px 20px 5px 20px;'>64</td>
            <td style='padding: 5px 20px 5px 20px;'>-378.34</td>
            <td style='padding: 5px 20px 5px 20px;'>2,378.34</td>
            <td style='padding: 5px 20px 5px 20px;'>43.07</td>
            <td style='padding: 5px 20px 5px 20px;'>43.07</td>
            <td style='padding: 5px 20px 5px 20px;'>1.00</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>y</td>
            <td style='padding: 5px 20px 5px 20px;'>64</td>
            <td style='padding: 5px 20px 5px 20px;'>-378.34</td>
            <td style='padding: 5px 20px 5px 20px;'>2,378.34</td>
            <td style='padding: 5px 20px 5px 20px;'>43.07</td>
            <td style='padding: 5px 20px 5px 20px;'>43.07</td>
            <td style='padding: 5px 20px 5px 20px;'>1.00</td>
          </tr>
          <tr>
            <td style='padding: 5px 20px 5px 20px;'>z</td>
            <td style='padding: 5px 20px 5px 20px;'>128</td>
            <td style='padding: 5px 20px 5px 20px;'>-2,000.00</td>
            <td style='padding: 5px 20px 5px 20px;'>11,334.05</td>
            <td style='padding: 5px 20px 5px 20px;'>20.00</td>
            <td style='padding: 5px 20px 5px 20px;'>531.76</td>
            <td style='padding: 5px 20px 5px 20px;'>1.05</td>
          </tr>
        </table>

        <br />
        <br />

Put resistivities to stratigraphic units
----------------------------------------

We could define the resistivities before, but currently it is difficult for
GemPy to interpolate for something like resistivities with a very wide range
of values (several orders of magnitudes). So we can simply map it here to the
``id`` (Note: GemPy does not do interpolation for cells which lie in
different stratigraphies).


.. code-block:: default


    # First, we have to get the id's for our mesh
    sol = gempy.compute_model(geo_model, at=grid.gridCC)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['custom']





.. code-block:: default


    geo_model.surfaces







.. only:: builder_html

    .. raw:: html

        <style  type="text/css" >
            #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col3 {
                    background-color:  #5DA629;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col3 {
                    background-color:  #527682;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col3 {
                    background-color:  #728f02;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col3 {
                    background-color:  #ffbe00;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col3 {
                    background-color:  #015482;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col3 {
                    background-color:  #9f0052;
                }    #T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col3 {
                    background-color:  #ff3f20;
                }</style><table id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                        <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row0" class="row_heading level0 row0" >6</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col0" class="data row0 col0" >air</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col1" class="data row0 col1" >Air_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col2" class="data row0 col2" >1</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col3" class="data row0 col3" >#5DA629</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row0_col4" class="data row0 col4" >1</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row1" class="row_heading level0 row1" >4</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col0" class="data row1 col0" >fault</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col1" class="data row1 col1" >Fault_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col2" class="data row1 col2" >1</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col3" class="data row1 col3" >#527682</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row1_col4" class="data row1 col4" >2</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row2" class="row_heading level0 row2" >3</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col0" class="data row2 col0" >seawater</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col1" class="data row2 col1" >Strat_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col2" class="data row2 col2" >1</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col3" class="data row2 col3" >#728f02</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row2_col4" class="data row2 col4" >3</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row3" class="row_heading level0 row3" >2</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col0" class="data row3 col0" >overburden</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col1" class="data row3 col1" >Strat_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col2" class="data row3 col2" >2</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col3" class="data row3 col3" >#ffbe00</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row3_col4" class="data row3 col4" >4</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row4" class="row_heading level0 row4" >0</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col0" class="data row4 col0" >target</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col1" class="data row4 col1" >Strat_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col2" class="data row4 col2" >3</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col3" class="data row4 col3" >#015482</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row4_col4" class="data row4 col4" >5</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row5" class="row_heading level0 row5" >1</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col0" class="data row5 col0" >underburden</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col1" class="data row5 col1" >Strat_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col2" class="data row5 col2" >4</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col3" class="data row5 col3" >#9f0052</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row5_col4" class="data row5 col4" >6</td>
                    </tr>
                    <tr>
                                <th id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3level0_row6" class="row_heading level0 row6" >5</th>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col0" class="data row6 col0" >basement</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col1" class="data row6 col1" >Strat_Series</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col2" class="data row6 col2" >5</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col3" class="data row6 col3" >#ff3f20</td>
                                <td id="T_83d12f6e_d2f8_11ea_926f_2016b9b700e3row6_col4" class="data row6 col4" >7</td>
                    </tr>
            </tbody></table>
        <br />
        <br />


.. code-block:: default


    # Now, we convert the id's to resistivities
    res = sol.custom[0][0, :grid.nC]

    res[res == 1] = 1e8  # air
    # id=2 is the fault
    res[np.round(res) == 3] = 0.3  # sea water
    res[np.round(res) == 4] = 1    # overburden
    res[np.round(res) == 5] = 50   # target
    res[np.round(res) == 6] = 1.5  # underburden
    res[np.round(res) == 7] = 200  # basement









Plot the input model
--------------------


.. code-block:: default


    dataset = grid.toVTK({'res': np.log10(res)})
    dataset = dataset.clip_box(bounds=(0, 2000, 0, 2000, -2000, 0), invert=False)

    # Create the rendering scene and add a grid axes
    p = pyvista.Plotter(notebook=True)
    p.show_grid(location='outer')

    # Add spatially referenced data to the scene
    dparams = {'rng': np.log10([0.3, 200]), 'cmap': 'viridis', 'show_edges': False}
    xyz = (1500, 500, -1500)
    p.add_mesh(dataset.slice('x', xyz), name='x-slice', **dparams)
    p.add_mesh(dataset.slice('y', xyz), name='y-slice', **dparams)
    # p.add_mesh(dataset.slice('z', xyz), name='z-slice', **dparams)

    # Add a layer as 3D
    p.add_mesh(dataset.threshold([1.69, 1.7]), name='vol', **dparams)

    # Show the scene!
    p.show()





.. image:: /gallery/interactions/images/sphx_glr_GemPy_discretize_emg3d_002.png
    :alt: GemPy discretize emg3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=1024x768 at 0x7F4A43A1CB80>




Compute the resistivities
-------------------------


.. code-block:: default


    # Create model
    model = emg3d.Model(grid, property_x=res, mapping='Resistivity')

    # Source field
    sfield = emg3d.get_source_field(grid, src, freq, 0)

    # Compute the efield
    pfield = emg3d.solve(grid, model, sfield, sslsolver=True, verb=3)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    :: emg3d START :: 08:39:01 :: v0.12.0

       MG-cycle       : 'F'                 sslsolver : 'bicgstab'
       semicoarsening : False [0]           tol       : 1e-06
       linerelaxation : False [0]           maxit     : 50 (1)
       nu_{i,1,c,2}   : 0, 2, 1, 2          verb      : 3
       Original grid  :  64 x  64 x 128     => 524,288 cells
       Coarsest grid  :   2 x   2 x   2     => 8 cells
       Coarsest level :   5 ;   5 ;   6   

       [hh:mm:ss]  rel. error            solver              MG          l s

           h_
          2h_ \                                        /
          4h_  \                            /\        / 
          8h_   \                  /\      /  \      /  
         16h_    \          /\    /  \    /    \    /   
         32h_     \    /\  /  \  /    \  /      \  /    
         64h_      \/\/  \/    \/      \/        \/     

       [08:39:04]   5.036e-02  after                       1 F-cycles    0 0
       [08:39:06]   7.380e-03  after                       2 F-cycles    0 0
       [08:39:07]   4.019e-03  after   1 bicgstab-cycles
       [08:39:09]   6.819e-04  after                       3 F-cycles    0 0
       [08:39:11]   7.260e-05  after                       4 F-cycles    0 0
       [08:39:12]   5.607e-05  after   2 bicgstab-cycles
       [08:39:14]   1.376e-05  after                       5 F-cycles    0 0
       [08:39:16]   2.583e-06  after                       6 F-cycles    0 0
       [08:39:16]   1.834e-06  after   3 bicgstab-cycles
       [08:39:19]   9.377e-07  after                       7 F-cycles    0 0
       [08:39:19]   7.955e-07  after   4 bicgstab-cycles

       > CONVERGED
       > Solver steps     : 4
       > MG prec. steps   : 7
       > Final rel. error : 7.955e-07

    :: emg3d END   :: 08:39:19 :: runtime = 0:00:18






.. code-block:: default


    grid.plot_3d_slicer(
        pfield.fx.ravel('F'), zslice=-1000, zlim=(-2000, 50),
        view='abs', v_type='Ex', clim=[1e-13, 1e-8],
        pcolor_opts={'cmap': 'viridis', 'norm': LogNorm()})





.. image:: /gallery/interactions/images/sphx_glr_GemPy_discretize_emg3d_003.png
    :alt: GemPy discretize emg3d
    :class: sphx-glr-single-img





Store so we can use it in other examples.


.. code-block:: default


    emg3d.save('./data/GemPyI.h5', model=model, mesh=grid)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Data saved to «/home/dtr/Codes/emg3d-gallery/examples/interactions/data/GemPyI.h5»
    [emg3d v0.12.0 (format 0.12.0) on 2020-07-31T08:39:20.368754].





.. code-block:: default


    emg3d.Report([gempy, pyvista, 'pandas'])





.. only:: builder_html

    .. raw:: html

        <table style='border: 3px solid #ddd;'>
          <tr>
             <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Fri Jul 31 08:39:20 2020 CEST</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
            <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
            <td style='text-align: left; border: 2px solid #fff;'>4</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
            <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
            <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
            <td style='text-align: left; border: 2px solid #fff;'>15.5 GB</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
            <td style='text-align: left; border: 2px solid #fff;'>Python</td>
          </tr>
          <tr>
             <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.8.3 (default, Jul  2 2020, 16:21:59) 
        [GCC 7.3.0]</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>gempy</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.2.3</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>pyvista</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.25.3</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>pandas</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.25.3</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.18.5</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
            <td style='text-align: left; border: 2px solid #fff;'>1.5.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.50.1</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.12.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.0.2</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.16.0</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
            <td style='text-align: left; border: 2px solid #fff;'>0.4.15</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
            <td style='text-align: left; border: 2px solid #fff;'>2.10.0</td>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
            <td style='text-align: left; border: 2px solid #fff;'>3.2.2</td>
          </tr>
          <tr>
            <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>IPython</td>
            <td style='text-align: left; border: 2px solid #fff;'>7.16.1</td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
            <td style= border: 2px solid #fff;'></td>
          </tr>
          <tr>
             <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) Math Kernel Library Version 2020.0.1 Product Build 20200208 for Intel(R) 64 architecture applications</td>
          </tr>
        </table>
        <br />
        <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  55.599 seconds)

**Estimated memory usage:**  2272 MB


.. _sphx_glr_download_gallery_interactions_GemPy_discretize_emg3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: GemPy_discretize_emg3d.py <GemPy_discretize_emg3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: GemPy_discretize_emg3d.ipynb <GemPy_discretize_emg3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
